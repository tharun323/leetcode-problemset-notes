Statement:
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]


Solution:
-----------------------
To Solve this problem, we have using a concept called "enumerate" which will convert a list into dictionary with keys starting with 0 to len of list and value
actual value of the item in the list.

we have used this because its pretty hard to keep track of the diff element index, if we have enumerated array we can have luxury to access the indexes properly

Steps:
dict = {}

Iterate in the enumerated dict (key,value) :
    diff = target - value
    check if diff exists in the result dict
        return key,dict[diff]
    else:
        store the index of the scanned element
        dict[value]=key



class Solution(object):
    def twoSum(self, nums, target):
        d = {}
        for key,value in enumerate(nums):
            diff = target-value
            if diff in d:
                return d[diff],key
            else:
                d[value] = key 

